#include <SoftwareSerial.h>
#include <IRremote.h>

#define relay 6
#define rxPin 9
#define txPin 8
#define RECV_PIN 4
#include <Wire.h>
#include "RTClib.h"

/********RTC*********************/
RTC_DS1307 rtc;

/********BLUETOOTH***************/
SoftwareSerial bluetooth(rxPin, txPin);

/*******Infra-Red****************/
IRrecv irrecv(RECV_PIN);
decode_results results;

String bluetooth_Buffer;
struct function 
{
  short activity;
  short extra_value;
  short extra_value2;
} function_temp;


void setup ()
 {
  #ifndef ESP8266
  while (!Serial); // for Leonardo/Micro/Zero
  #endif	 
	 
  Serial.begin(9600); //set baud rate
  bluetooth.begin(9600);
  pinMode(relay, OUTPUT);
  digitalWrite(relay, HIGH);
  delay(1000);
  
  //FOR DEBUG 
  /* Serial.begin(57600);
  if (! rtc.begin()) {
    Serial.println("Couldn't find RTC");
    while (1);
  }
  */
  
  if (! rtc.isrunning()) {
    Serial.println("RTC is NOT running!");
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
   // rtc.adjust(DateTime(year, month, day, hour, min, sec)); IF NEED ADJUSTMENTS
  }
  
 }

void loop ()
 {
  event_handler();
 }

void event_handler()
{  
  if(bluetooth.available())
    bluetooth_handler();  
  
  if (irrecv.decode(&results))
    ir_handler(&result);

   return;
}

void ir_handler(decode_results *results)
{
  
}

/**********************STRUCTURE BLUETOOTH PACKAGE****************************************
 * ('figures' in italian : 'cifre')
 * ([) Message opening                                                    1 position : [0]
 * (1st number, two figures) Activity                                     2 position : [2]
 * (,)                                                                    1 position : [3]
 * (2nd number , four figures) Extra_value                                4 position : [7]
 * (,)																	  1 position : [8]
 * (3rd number , four figures) Extra_value2                               4 position : [12]
 * (]) message closer                                                     1 position : [13]
 *****************************************************************************************/

void bluetooth_handler();
{
  char check = null;
  check = bluetooth.read();
  bluetooth_Buffer += check;
  if (check==']')
  bluetooth_Parser();
  
}

void bluetooth_Parser()
{
  if (int(bluetooth_Buffer.lenght())!=8) //Hard coded dimensions and particularities of the message
  bluetooth_Buffer = "";
    else if (bluetooth_Buffer[0]!='[')
    bluetooth_Buffer = "";
      else if (blueooth_Buffer[3]!=',')
      bluetooth_Buffer = "";
		else if (bluetooth_Buffer[8]!=',')
		blueooth_Buffer = "";
		 else if (blueooth_Buffer[13]!=']')
		  else
          {  String temp_string;
             long temp=0;
             //Processing the activity figures 
              temp_string=bluetooth_Buffer.substring(1,3); // substring (from [index] ,to [index we want in the sub +1]) https://www.arduino.cc/en/Reference/StringSubstring
              temp=atoi(temp_string);
              function_temp.activity = int(temp) 
             //Processing the extra_value figures
              temp_string=bluetooth_Buffer.substring(4,8); 
              temp=atoi(temp_string);
              function_temp.extra_value = int(temp);
			 //Processing the extra_value2 figures
			  temp_string=bluetooth_Buffer.substring(9,13); 
              temp=atoi(temp_string);
              function_temp.extra_value2 = int(temp);

            activity_manager();
        }
  
}


// RUSHED ACTIVITY MANAGER (WILL BE SOSTITUTED WITH A PROPER MANAGER IN FUTURE VERSIONS)
void activity_manager ()
{
  if (function_temp.activity == 1) // Turn OFF relay
      turn_off(function_temp.extra_value);
  
  if (function_temp.activity == 2 ) // Turn On relay 
      turn_on(function_temp.extra_value);

  if (function_temp.activity == 2 ) // Set timer 
	  set_timer(function_temp.extra_value);
    
  if (function_temp.activity == 2 ) // Set daily start
      set_daily_start(function_temp.extra_value);

  if (function_temp.activity == 2 ) // Set daily end
      set_daily_end(function_temp.extra_value);

	return;
}

void set_timer()
{}

void set_daily_end()
{}

void set_daily_start()
{}

void turn_off ( int pin)
  {
      digitalWrite(pin , HIGH);
      Serial.println("OFF");
      delay (4000);                                     //this is to not overcharge the relay
  }
void turn_on ( int pin)
  {
      digitalWrite(pin , LOW);
      Serial.println("ON");
      delay (4000);                                      //this is to not overcharge the relay
  }


