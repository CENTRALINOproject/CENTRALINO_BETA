{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Consolas;}}
{\colortbl\red51\green204\blue204;\red51\green102\blue255;\red255\green255\blue255;\red128\green0\blue0;\red255\green0\blue0;\red0\green0\blue0;\red0\green255\blue0;\red0\green0\blue255;\red0\green128\blue0;\red195\green195\blue195;\red255\green0\blue255;}
{\info{\comment Generated by the SynEdit RTF exporter}
{\title main.rtf}}

\deflang1033\pard\plain\f0\fs24 \cf0 #include <MemoryFree.h>
\par #include <SoftwareSerial.h>
\par #include <IRremote.h>
\par #include <string.h>
\par #define rxPin 9
\par #define txPin 10
\par #define RECV_PIN 4
\par 
\par 
\par \cf1\i /***************************PLEASE MODIFY THIS LINE WHEN NEEDED*************************/\i0\cf2  \cb3\cf4 #\cb5\cf6 define\cf2  \cf6 total_relay\cf2  \cf7 2\cf2     \cf1\i // Total number of relay connected
\par 
\par \i0\cf0 #include <Wire.h>
\par #include "RTClib.h"
\par #include <TimeAlarms.h>
\par #include <TimeLib.h>
\par #include <Time.h>
\par 
\par 
\par \cf1\i /********RTC*********************/
\par \i0\cf6 RTC_DS1307\cf2  \cf6 rtc\cf4 ;
\par \cf6 tmElements_t\cf2  \cf6 tm\cf4 ;
\par 
\par \cf0 #if defined(ARDUINO_ARCH_SAMD)
\par \cf1\i // for Zero, output on USB Serial console, remove line below if using programming port to program the Zero!
\par \i0\cf2    \cf0 #define Serial SerialUSB
\par #endif
\par 
\par 
\par \cf1\i /********BLUETOOTH***************/
\par \i0\cf6 SoftwareSerial\cf2  \cf6 bluetooth\cf4 (\cf6 rxPin\cf4 ,\cf2  \cf6 txPin\cf4 );
\par 
\par \cf1\i /*******Infra-Red****************/
\par \i0\cf6 IRrecv\cf2  \cf6 irrecv\cf4 (\cf6 RECV_PIN\cf4 );
\par \cf6 decode_results\cf2  \cf6 results\cf4 ;
\par 
\par \cf6 String\cf2  \cf6 bluetooth_Buffer\cf4 ;
\par 
\par \cf8 struct\cf2  \cf6 function\cf2  
\par \cf4 \{
\par \cf2   \cf8 int\cf2  \cf6 activity\cf4 ;
\par \cf2   \cf8 int\cf2  \cf6 extra_value\cf4 ;
\par \cf2   \cf8 int\cf2  \cf6 extra_value2\cf4 ;
\par \}\cf2  \cf6 function_temp\cf4 ;
\par 
\par \cf8 struct\cf2  \cf6 relay
\par \cf4 \{
\par \cf2   \cf8 int\cf2  \cf6 socket\cf2  \cf4 =\cf2  \cf7 0\cf4 ;
\par \cf2   \cf8 int\cf2  \cf6 hour_daily_end\cf2  \cf4 =\cf2  \cf7 61\cf4 ;
\par \cf2   \cf8 int\cf2  \cf6 minute_daily_end\cf2  \cf4 =\cf2  \cf7 61\cf4 ;
\par \cf2   \cf8 int\cf2  \cf6 second_daily_end_and_start\cf2  \cf4 =\cf2  \cf7 0\cf4 ;
\par \cf2   \cf8 int\cf2  \cf6 hour_daily_start\cf2  \cf4 =\cf2  \cf7 61\cf4 ;
\par \cf2   \cf8 int\cf2  \cf6 minute_daily_start\cf2  \cf4 =\cf2  \cf7 61\cf4 ;
\par 
\par \cf2   \cf8 int\cf2  \cf6 timer_off_hour\cf2  \cf4 =\cf2  \cf7 61\cf4 ;
\par \cf2   \cf8 int\cf2  \cf6 timer_off_minute\cf2  \cf4 =\cf2  \cf7 61\cf4 ;
\par \cf2   \cf8 int\cf2  \cf6 timer_off_second\cf2  \cf4 =\cf2  \cf7 61\cf4 ;
\par 
\par \cf2   \cf8 int\cf2  \cf6 timer_on_hour\cf2  \cf4 =\cf2  \cf7 61\cf4 ;
\par \cf2   \cf8 int\cf2  \cf6 timer_on_minute\cf2  \cf4 =\cf2  \cf7 61\cf4 ;
\par \cf2   \cf8 int\cf2  \cf6 timer_on_second\cf2  \cf4 =\cf2  \cf7 61\cf4 ;
\par 
\par \cf2   \cf8 int\cf2  \cf6 description\cf2  \cf4 =\cf2  \cf7 0\cf4 ;
\par \cf2   
\par \cf4 \}\cf2  \cf6 rel\cf4 [\cf6 total_relay\cf4 ];
\par 
\par \cf8 void\cf2  \cf6 all_rel_HIGH\cf4 ()
\par \{
\par \cf2   \cf8 for\cf2  \cf4 (\cf8 int\cf2  \cf6 i\cf4 =\cf7 0\cf4 ;\cf2  \cf6 i\cf4 <\cf6 total_relay\cf2  \cf4 ;\cf6 i\cf4 ++)
\par \cf2   \cf4 \{
\par \cf2    \cf6 digitalWrite\cf4 (\cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 socket\cf4 ,\cf2  \cf6 HIGH\cf4 );
\par \cf2    
\par    \cf6 Serial\cf4 .\cf6 print\cf4 (\cf9 "Impostato ad HIGH pin n. "\cf4 );
\par \cf2    \cf6 Serial\cf4 .\cf6 print\cf4 (\cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 socket\cf4 );
\par \cf2    \cf6 Serial\cf4 .\cf6 print\cf4 (\cf9 " per struttura rel[] n. "\cf4 );
\par \cf2    \cf6 Serial\cf4 .\cf6 println\cf4 (\cf6 i\cf4 );
\par \cf2   \cf4 \}
\par \}
\par 
\par \cf8 void\cf2  \cf6 init_output_rel\cf4 ()
\par \{
\par \cf2   \cf8 for\cf2  \cf4 (\cf8 int\cf2  \cf6 i\cf4 =\cf7 0\cf4 ;\cf2  \cf6 i\cf4 <\cf6 total_relay\cf2  \cf4 ;\cf6 i\cf4 ++)
\par \cf2    \cf4 \{
\par \cf2    \cf6 pinMode\cf4 (\cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 socket\cf4 ,\cf2  \cf6 OUTPUT\cf4 );
\par \cf2    
\par    \cf6 Serial\cf4 .\cf6 print\cf4 (\cf9 "Inizializzato pin n. "\cf4 );
\par \cf2    \cf6 Serial\cf4 .\cf6 print\cf4 (\cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 socket\cf4 );
\par \cf2    \cf6 Serial\cf4 .\cf6 print\cf4 (\cf9 " per struttura rel[] n. "\cf4 );
\par \cf2    \cf6 Serial\cf4 .\cf6 println\cf4 (\cf6 i\cf4 );
\par \cf2    \cf4 \}
\par \}
\par 
\par \cf8 void\cf2  \cf6 setup\cf2  \cf4 ()
\par \cf2  \cf4 \{
\par \cf2   \cf1\i /*
\par   #ifndef ESP8266
\par   while (!Serial); // for Leonardo/Micro/Zero
\par   #endif
\par   */\i0\cf2 	 
\par 	 
\par   \cf6 Serial\cf4 .\cf6 begin\cf4 (\cf7 9600\cf4 );\cf2  \cf1\i //set baud rate
\par \i0\cf2   \cf6 bluetooth\cf4 .\cf6 begin\cf4 (\cf7 9600\cf4 );
\par \cf2   
\par   \cf6 init_output_rel\cf4 ();\cf2  \cf1\i //Declare output all relays
\par \i0\cf2   \cf6 all_rel_HIGH\cf4 ();\cf2     \cf1\i //Set HIGH all relays
\par \i0\cf2   \cf6 delay\cf4 (\cf7 1000\cf4 );
\par 
\par \cf2   \cf6 irrecv\cf4 .\cf6 enableIRIn\cf4 ();\cf2  \cf1\i // Start the receiver
\par \i0\cf2   
\par   \cf1\i //FOR DEBUG 
\par \i0\cf2   \cf1\i /* Serial.begin(57600);
\par   if (! rtc.begin()) \{
\par     Serial.println("Couldn't find RTC");
\par     while (1);
\par   \}
\par   */
\par 
\par \i0\cf2   \cf8 if\cf2  \cf4 (!\cf2  \cf6 rtc\cf4 .\cf6 begin\cf4 ())\cf2  \cf4 \{
\par \cf2   \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "Couldn't find RTC"\cf4 );
\par \cf2   \cf8 while\cf2  \cf4 (\cf7 1\cf4 );
\par \cf2   \cf4 \}
\par \cf2   \cf8 if\cf2  \cf4 (!\cf2  \cf6 rtc\cf4 .\cf6 isrunning\cf4 ())\cf2  \cf4 \{
\par \cf2     \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "RTC is NOT running!"\cf4 );
\par \cf2     \cf6 rtc\cf4 .\cf6 adjust\cf4 (\cf6 DateTime\cf4 (\cf6 F\cf4 (\cf6 __DATE__\cf4 ),\cf2  \cf6 F\cf4 (\cf6 __TIME__\cf4 )));
\par \cf2    \cf1\i // rtc.adjust(DateTime(year, month, day, hour, min, sec)); IF NEED ADJUSTMENTS
\par \i0\cf2   \cf4 \}
\par \cf2   
\par   \cf6 DateTime\cf2  \cf6 now\cf2  \cf4 =\cf2  \cf6 rtc\cf4 .\cf6 now\cf4 ();
\par \cf2   \cf6 setTime\cf4 (\cf6 now\cf4 .\cf6 hour\cf4 (),\cf6 now\cf4 .\cf6 minute\cf4 (),\cf6 now\cf4 .\cf6 second\cf4 (),\cf6 now\cf4 .\cf6 month\cf4 (),\cf6 now\cf4 .\cf6 day\cf4 (),\cf6 now\cf4 .\cf6 year\cf4 ());
\par 
\par \cf2   \cf1\i /*********PLEASE HERE DECLARE THE PIN'S OF THE RELAYS, ONE EACH REL[] STRUCTURE*******/
\par \i0\cf2   \cf1\i //example : rel[].socket = pin connected to relay ;
\par \i0\cf2   
\par   \cf6 rel\cf4 [\cf7 0\cf4 ].\cf6 socket\cf2  \cf4 =\cf2  \cf7 6\cf4 ;
\par \cf2   \cf6 rel\cf4 [\cf7 0\cf4 ].\cf6 description\cf2  \cf4 =\cf2  \cf7 1\cf4 ;\cf2   
\par   \cf6 rel\cf4 [\cf7 1\cf4 ].\cf6 socket\cf2  \cf4 =\cf2  \cf7 7\cf4 ;
\par \cf2   \cf6 rel\cf4 [\cf7 1\cf4 ].\cf6 description\cf2  \cf4 =\cf2  \cf7 3\cf4 ;
\par 
\par \cf2  \cf4 \}
\par \cf2  
\par \cf8 void\cf2  \cf6 printDigits\cf4 (\cf8 int\cf2  \cf6 digits\cf4 )
\par \{
\par \cf2   \cf6 Serial\cf4 .\cf6 print\cf4 (\cf9 ":"\cf4 );
\par \cf2   \cf8 if\cf4 (\cf6 digits\cf2  \cf4 <\cf2  \cf7 10\cf4 )
\par \cf2     \cf6 Serial\cf4 .\cf6 print\cf4 (\cf1 '0'\cf4 );
\par \cf2   \cf6 Serial\cf4 .\cf6 print\cf4 (\cf6 digits\cf4 );
\par \}
\par 
\par \cf8 void\cf2  \cf6 digitalClockDisplay\cf4 ()
\par \{
\par \cf2   \cf1\i // digital clock display of the time
\par \i0\cf2   \cf6 DateTime\cf2  \cf6 now\cf2  \cf4 =\cf2  \cf6 rtc\cf4 .\cf6 now\cf4 ();
\par \cf2   \cf6 Serial\cf4 .\cf6 print\cf4 (\cf6 now\cf4 .\cf6 hour\cf4 ());
\par \cf2   \cf6 printDigits\cf4 (\cf6 now\cf4 .\cf6 minute\cf4 ());
\par \cf2   \cf6 printDigits\cf4 (\cf6 now\cf4 .\cf6 second\cf4 ());
\par \cf2   \cf6 Serial\cf4 .\cf6 println\cf4 ();\cf2  
\par \cf4 \}
\par 
\par \cf8 bool\cf2  \cf6 ir_handler\cf4 (\cf6 decode_results\cf2  \cf4 *\cf6 results\cf4 )
\par \{
\par \cf2   \cf8 if\cf2  \cf4 (\cf6 results\cf4 ->\cf6 value\cf2  \cf4 ==\cf2  \cf10 0xA90\cf2  \cf4 )
\par \cf2     \cf6 turn_off\cf4 ();
\par \cf2     \cf8 else\cf2  
\par       \cf8 return\cf2  \cf8 false\cf4 ;
\par \}
\par 
\par \cf8 void\cf2  \cf6 bluetooth_handler\cf4 ()
\par \{
\par \cf2   \cf8 char\cf2  \cf6 check\cf2  \cf4 =\cf2  \cf1 ' '\cf4 ;
\par \cf2   \cf6 check\cf2  \cf4 =\cf2  \cf6 bluetooth\cf4 .\cf6 read\cf4 ();
\par \cf2   \cf8 if\cf2  \cf4 ((\cf8 int\cf4 (\cf6 check\cf4 )!=\cf2  \cf7 13\cf4 )&&(\cf8 int\cf4 (\cf6 check\cf4 )!=\cf2  \cf7 10\cf2  \cf4 )&&(\cf8 int\cf4 (\cf6 check\cf4 )!=\cf2  \cf7 32\cf4 ))\cf2  \cf1\i //Ignore '\\r' , '\\n' and spaces
\par \i0\cf2   \cf6 bluetooth_Buffer\cf2  \cf4 +=\cf2  \cf6 check\cf4 ;
\par \cf2   \cf8 else
\par \cf2   \cf4 \{
\par \cf2   \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "Relivated unprintable chars, ASCII value is : "\cf4 );
\par \cf2   \cf6 Serial\cf4 .\cf6 println\cf4 (\cf8 int\cf4 (\cf6 check\cf4 ));
\par \cf2   \cf4 \}
\par \cf2   
\par   \cf6 Serial\cf4 .\cf6 print\cf4 (\cf9 "Value of bluetooth buffer is = '"\cf4 );
\par \cf2   \cf6 Serial\cf4 .\cf6 print\cf4 (\cf6 bluetooth_Buffer\cf4 );
\par \cf2   \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "'"\cf4 );
\par \cf2   
\par   \cf8 if\cf2  \cf4 (\cf6 check\cf4 ==\cf1 ']'\cf4 )
\par \cf2   \cf6 bluetooth_Parser\cf4 ();
\par \cf2   
\par \cf4 \}
\par 
\par \cf1\i /********************************MEANINGS OF DESCRIPTIONS*********************************
\par 1  = Lamp
\par 2  = Chandelier
\par 3  = Computer
\par 4  = Fridge
\par 5  = Fan
\par 6  = Microwave
\par 7  = Charger
\par 8  = Electric shutter
\par 9  = Amplifier
\par 10 = Speakers
\par 11 = Aircooler
\par 12 = Confetti's cannon
\par *****************************************************************************************/
\par 
\par /**********************STRUCTURE BLUETOOTH PACKAGE****************************************
\par  * ('figures' in italian : 'cifre')
\par  * ([) Message opening                                                    1 position : [0]
\par  * (1st number, two figures) Activity                                     2 position : [2]
\par  * (,)                                                                    1 position : [3]
\par  * (2nd number , four figures) Extra_value                                4 position : [7]
\par  * (,)																	                                  1 position : [8]
\par  * (3rd number , six figures) Extra_value2                                6 position : [14]
\par  * (]) message closer                                                     1 position : [15] Total = 16
\par  *****************************************************************************************/
\par 
\par 
\par 
\par \i0\cf8 void\cf2  \cf6 bluetooth_Parser\cf4 ()
\par \{\cf2  \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "Open bluetooth parser"\cf4 );
\par \cf2   \cf8 if\cf2  \cf4 (\cf8 int\cf4 (\cf6 bluetooth_Buffer\cf4 .\cf6 length\cf4 ())!=\cf7 16\cf4 )\cf2  \cf1\i //Hard coded dimensions and particularities of the message
\par \i0\cf2   \cf4 \{\cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "Lenght check not passed"\cf4 );
\par \cf2    \cf6 Serial\cf4 .\cf6 println\cf4 (\cf8 int\cf4 (\cf6 bluetooth_Buffer\cf4 .\cf6 length\cf4 ()));
\par \cf2    \cf6 bluetooth_Buffer\cf2  \cf4 =\cf2  \cf9 ""\cf4 ;\}\cf2   
\par     \cf8 else\cf2  \cf8 if\cf2  \cf4 (\cf6 bluetooth_Buffer\cf4 [\cf7 0\cf4 ]!=\cf1 '['\cf4 )
\par \cf2      \cf4 \{\cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "Opener check not passed"\cf4 );
\par \cf2      \cf6 Serial\cf4 .\cf6 println\cf4 (\cf6 bluetooth_Buffer\cf4 [\cf7 0\cf4 ]);
\par \cf2      \cf6 bluetooth_Buffer\cf2  \cf4 =\cf2  \cf9 ""\cf4 ;\}
\par \cf2       \cf8 else\cf2  \cf8 if\cf2  \cf4 (\cf6 bluetooth_Buffer\cf4 [\cf7 3\cf4 ]!=\cf1 ','\cf4 )
\par \cf2       \cf4 \{\cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "First comma check not passed"\cf4 );
\par \cf2       \cf6 Serial\cf4 .\cf6 println\cf4 (\cf6 bluetooth_Buffer\cf4 [\cf7 3\cf4 ]);
\par \cf2       \cf6 bluetooth_Buffer\cf2  \cf4 =\cf2  \cf9 ""\cf4 ;\}
\par \cf2 		   \cf8 else\cf2  \cf8 if\cf2  \cf4 (\cf6 bluetooth_Buffer\cf4 [\cf7 8\cf4 ]!=\cf1 ','\cf4 )
\par \cf2 	     \cf4 \{\cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "Second comma check not passed"\cf4 );
\par \cf2        \cf6 Serial\cf4 .\cf6 println\cf4 (\cf6 bluetooth_Buffer\cf4 [\cf7 8\cf4 ]);
\par \cf2        \cf6 bluetooth_Buffer\cf2  \cf4 =\cf2  \cf9 ""\cf4 ;\}
\par \cf2 		     \cf8 else\cf2  \cf8 if\cf2  \cf4 (\cf6 bluetooth_Buffer\cf4 [\cf7 15\cf4 ]!=\cf1 ']'\cf4 )
\par \cf2          \cf4 \{\cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "Closer check not passed"\cf4 );
\par \cf2           \cf6 Serial\cf4 .\cf6 println\cf4 (\cf6 bluetooth_Buffer\cf4 [\cf7 15\cf4 ]);
\par \cf2            \cf6 bluetooth_Buffer\cf2  \cf4 =\cf2  \cf9 ""\cf4 ;\}
\par \cf2 		      \cf8 else
\par \cf2           \cf4 \{\cf2   \cf6 String\cf2  \cf6 temp_string\cf4 ;
\par \cf2              \cf8 long\cf2  \cf6 temp\cf4 =\cf7 0\cf4 ;
\par 
\par \cf2               \cf6 Serial\cf4 .\cf6 print\cf4 (\cf9 "Received package : "\cf4 );
\par \cf2               \cf6 Serial\cf4 .\cf6 println\cf4 (\cf6 bluetooth_Buffer\cf4 );
\par \cf2               \cf6 temp_string\cf4 =\cf6 bluetooth_Buffer\cf4 .\cf6 substring\cf4 (\cf7 1\cf4 ,\cf7 3\cf4 );\cf2  \cf1\i // substring (from [index] ,to [index we want in the sub +1])// https://www.arduino.cc/en/Reference/StringSubstring
\par \i0\cf2               \cf6 temp\cf4 =\cf6 atoi\cf4 (\cf6 temp_string\cf4 .\cf6 c_str\cf4 ());
\par \cf2               \cf6 function_temp\cf4 .\cf6 activity\cf2  \cf4 =\cf2  \cf8 int\cf4 (\cf6 temp\cf4 );
\par \cf2               \cf6 Serial\cf4 .\cf6 print\cf4 (\cf9 "Received activity : "\cf4 );
\par \cf2               \cf6 Serial\cf4 .\cf6 println\cf4 (\cf6 function_temp\cf4 .\cf6 activity\cf4 );
\par \cf2               
\par               \cf6 temp_string\cf4 =\cf6 bluetooth_Buffer\cf4 .\cf6 substring\cf4 (\cf7 4\cf4 ,\cf7 8\cf4 );\cf2  
\par               \cf6 temp\cf4 =\cf6 atoi\cf4 (\cf6 temp_string\cf4 .\cf6 c_str\cf4 ());
\par \cf2               \cf6 function_temp\cf4 .\cf6 extra_value\cf2  \cf4 =\cf2  \cf8 int\cf4 (\cf6 temp\cf4 );
\par \cf2               \cf6 Serial\cf4 .\cf6 print\cf4 (\cf9 "Received extra_val : "\cf4 );
\par \cf2               \cf6 Serial\cf4 .\cf6 println\cf4 (\cf6 function_temp\cf4 .\cf6 extra_value\cf4 );
\par \cf2                             
\par 			        \cf6 temp_string\cf4 =\cf6 bluetooth_Buffer\cf4 .\cf6 substring\cf4 (\cf7 9\cf4 ,\cf7 15\cf4 );
\par \cf2               \cf6 temp\cf4 =\cf6 atoi\cf4 (\cf6 temp_string\cf4 .\cf6 c_str\cf4 ());
\par \cf2               \cf6 function_temp\cf4 .\cf6 extra_value2\cf2  \cf4 =\cf2  \cf8 int\cf4 (\cf6 temp\cf4 );
\par \cf2               \cf6 Serial\cf4 .\cf6 print\cf4 (\cf9 "Received extra_val2 : "\cf4 );
\par \cf2               \cf6 Serial\cf4 .\cf6 println\cf4 (\cf6 function_temp\cf4 .\cf6 extra_value2\cf4 );
\par 
\par \cf2             \cf6 bluetooth_Buffer\cf4 =\cf9 ""\cf4 ;\cf2  \cf1\i //Reset buffer for new packets
\par 
\par \i0\cf2             \cf6 activity_manager\cf4 ();
\par \cf2         \cf4 \}
\par \cf2   
\par \cf4 \}
\par 
\par 
\par \cf1\i // ACTIVITY MANAGER
\par \i0\cf8 void\cf2  \cf6 activity_manager\cf2  \cf4 ()
\par \{\cf2  \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "Open activity manager"\cf4 );
\par \cf2   \cf6 Serial\cf4 .\cf6 println\cf4 (\cf6 function_temp\cf4 .\cf6 activity\cf4 );
\par \cf2   \cf6 digitalClockDisplay\cf4 ();
\par \cf2   
\par   \cf8 if\cf2  \cf4 (\cf6 function_temp\cf4 .\cf6 activity\cf2  \cf4 ==\cf2  \cf7 1\cf4 )\cf2  \cf1\i // Turn OFF relay n. extra_value
\par \i0\cf2       \cf6 turn_off\cf4 ();
\par \cf2   
\par   \cf8 if\cf2  \cf4 (\cf6 function_temp\cf4 .\cf6 activity\cf2  \cf4 ==\cf2  \cf7 2\cf2  \cf4 )\cf2  \cf1\i // Turn On relay n. extra_value
\par \i0\cf2       \cf6 turn_on\cf4 ();
\par 
\par \cf2   \cf8 if\cf2  \cf4 (\cf6 function_temp\cf4 .\cf6 activity\cf2  \cf4 ==\cf2  \cf7 3\cf2  \cf4 )\cf2  \cf1\i // Set timer to turn ON relay n. extra_value in time extra_value2
\par \i0\cf2 	    \cf6 set_timer_on\cf4 ();
\par 
\par \cf2   \cf8 if\cf2  \cf4 (\cf6 function_temp\cf4 .\cf6 activity\cf2  \cf4 ==\cf2  \cf7 4\cf2  \cf4 )\cf2  \cf1\i // Set timer to turn OFF relay n. extra_value in time extra_value2
\par \i0\cf2       \cf6 set_timer_off\cf4 ();
\par \cf2     
\par   \cf8 if\cf2  \cf4 (\cf6 function_temp\cf4 .\cf6 activity\cf2  \cf4 ==\cf2  \cf7 5\cf2  \cf4 )\cf2  \cf1\i // Set daily START on relay n. extra_value in time extra_value2
\par \i0\cf2       \cf6 set_daily_start\cf4 ();
\par 
\par \cf2   \cf8 if\cf2  \cf4 (\cf6 function_temp\cf4 .\cf6 activity\cf2  \cf4 ==\cf2  \cf7 6\cf2  \cf4 )\cf2  \cf1\i // Set daily END on relay n. extra_value in time extra_value2
\par \i0\cf2       \cf6 set_daily_end\cf4 ();
\par 
\par \cf2   \cf8 if\cf2  \cf4 (\cf6 function_temp\cf4 .\cf6 activity\cf2  \cf4 ==\cf2  \cf7 50\cf2  \cf4 )\cf2  \cf1\i // REQUEST of OFFER 
\par \i0\cf2       \cf6 bluetooth_offer\cf4 ();
\par 
\par \cf2                      \cf1\i // 51 is an OFFER package (Will never be received on CLIENTino)
\par \i0\cf2                    
\par                 
\par                      \cf1\i // 99 is a CLOSE communication_packet (Will never be received on CLIENTino)*/
\par 
\par \i0\cf2 	\cf8 return\cf4 ;
\par \}
\par 
\par \cf8 void\cf2  \cf6 bluetooth_offer\cf4 ()
\par \{
\par \cf2   \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "Offer now :"\cf4 );
\par \cf2   \cf8 for\cf2  \cf4 (\cf8 int\cf2  \cf6 i\cf4 =\cf7 0\cf4 ;\cf2  \cf6 i\cf4 <\cf6 total_relay\cf4 ;\cf2  \cf6 i\cf4 ++)
\par \cf2     \cf6 send_package\cf4 (\cf7 51\cf4 ,\cf2  \cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 socket\cf4 ,\cf2  \cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 description\cf2  \cf4 );
\par \cf2   
\par   \cf6 send_package\cf4 (\cf7 99\cf4 ,\cf2  \cf7 0\cf4 ,\cf2  \cf7 0\cf4 );\cf2  \cf1\i //Close comunication
\par \i0\cf8 return\cf4 ;
\par \}
\par 
\par \cf8 void\cf2  \cf6 send_package\cf4 (\cf8 int\cf2  \cf6 activity\cf4 ,\cf2  \cf8 int\cf2  \cf6 extra_value\cf4 ,\cf2  \cf8 int\cf2  \cf6 extra_value2\cf4 )
\par \{\cf2  \cf1\i //Serial.println("FLAG send package"); 
\par \i0\cf2   
\par   \cf1\i //Serial.println("Send package");
\par \i0\cf2   
\par   \cf1\i //Serial.print("freeMemory()=");
\par \i0\cf2   \cf1\i //Serial.println(freeMemory());
\par \i0\cf2   
\par   \cf8 if\cf2  \cf4 ((\cf6 activity\cf4 >\cf7 99\cf4 )||(\cf6 extra_value\cf4 >\cf7 9999\cf4 )||(\cf6 extra_value2\cf4 >\cf7 999999\cf4 ))
\par \cf2   \cf4 \{\cf2  
\par     \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "Unable to send the packet because of uncorrect values"\cf4 );
\par \cf2   \cf4 \}
\par \cf2   \cf8 else
\par \cf2   \cf4 \{
\par \cf2     \cf6 String\cf2  \cf6 packet\cf2  \cf4 =\cf2  \cf9 ""\cf4 ;
\par \cf2     \cf6 String\cf2  \cf6 aux_activity\cf2  \cf4 =\cf2  \cf6 zero_padd\cf4 (\cf6 activity\cf4 ,\cf2  \cf7 2\cf4 );
\par \cf2     \cf1\i //Serial.println("THIS IS AUX ACT");
\par \i0\cf2     \cf1\i //Serial.println(aux_activity);
\par \i0\cf2     
\par     \cf6 String\cf2  \cf6 aux_extra_value\cf2  \cf4 =\cf2  \cf6 zero_padd\cf4 (\cf6 extra_value\cf4 ,\cf2  \cf7 4\cf4 );
\par \cf2     \cf1\i //Serial.println("THIS IS AUX EXTRA");
\par \i0\cf2     \cf1\i //Serial.println(aux_extra_value);
\par \i0\cf2     
\par     \cf6 String\cf2  \cf6 aux_extra_value2\cf2  \cf4 =\cf2  \cf6 zero_padd\cf4 (\cf6 extra_value2\cf4 ,\cf2  \cf7 6\cf4 );
\par \cf2     \cf1\i //Serial.println("THIS IS AUX EXTRA 2");
\par \i0\cf2     \cf1\i //Serial.println(aux_extra_value2);
\par 
\par \i0\cf2     \cf6 packet\cf2  \cf4 +=\cf2  \cf1 '['\cf4 ;
\par \cf2     \cf6 packet\cf2  \cf4 +=\cf2  \cf6 aux_activity\cf4 ;\cf2  
\par     \cf6 packet\cf2  \cf4 +=\cf2  \cf1 ','\cf4 ;
\par \cf2     \cf6 packet\cf2  \cf4 +=\cf2  \cf6 aux_extra_value\cf4 ;
\par \cf2     \cf6 packet\cf2  \cf4 +=\cf2  \cf1 ','\cf4 ;
\par \cf2     \cf6 packet\cf2  \cf4 +=\cf2  \cf6 aux_extra_value2\cf4 ;
\par \cf2     \cf6 packet\cf2  \cf4 +=\cf2  \cf1 ']'\cf4 ;
\par 
\par \cf2     \cf6 Serial\cf4 .\cf6 print\cf4 (\cf9 "This is packet"\cf4 );
\par \cf2     \cf6 Serial\cf4 .\cf6 println\cf4 (\cf6 packet\cf4 );\cf2              \cf1\i //packet.concat(aux_activity)
\par \i0\cf2     \cf6 bluetooth\cf4 .\cf6 print\cf4 (\cf6 packet\cf4 );
\par \cf2   \cf4 \}
\par \cf2   
\par \cf8 return\cf4 ;
\par \}
\par 
\par \cf6 String\cf2  \cf6 zero_padd\cf4 (\cf8 int\cf2  \cf6 value\cf4 ,\cf2  \cf8 int\cf2  \cf6 spaces\cf4 )
\par \{\cf2  \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "FLAG zero_padd"\cf4 );
\par \cf2   \cf6 String\cf2  \cf6 result\cf4 =\cf9 ""\cf4 ;
\par \cf2   \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "FLAG zero_padd1"\cf4 );
\par \cf2   \cf8 int\cf2  \cf6 padds\cf4 =\cf6 spaces\cf4 ,\cf2  \cf6 aux_value\cf4 =\cf6 value\cf4 ;
\par \cf2   \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "FLAG zero_padd2"\cf4 );
\par 
\par \cf2   \cf8 if\cf4 (\cf6 aux_value\cf4 !=\cf7 0\cf4 )
\par \cf2   \cf4 \{
\par \cf2     \cf8 do\cf2  
\par     \cf4 \{
\par \cf2     \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "FLAG zero_padd3"\cf4 );
\par \cf2     \cf6 Serial\cf4 .\cf6 println\cf4 (\cf6 aux_value\cf4 );
\par \cf2     \cf8 if\cf2  \cf4 (\cf6 aux_value\cf2  \cf4 >\cf2  \cf7 0\cf4 )
\par \cf2       \cf4 \{
\par \cf2       \cf6 aux_value\cf2  \cf4 =\cf2  \cf6 aux_value\cf2  \cf4 /\cf2  \cf7 10\cf4 ;
\par \cf2       \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "This is aux after /10"\cf4 );
\par \cf2       \cf6 Serial\cf4 .\cf6 println\cf4 (\cf6 aux_value\cf4 );
\par \cf2       \cf6 padds\cf4 --;
\par \cf2       \cf4 \}
\par \cf2   \cf4 \}
\par \cf2   \cf8 while\cf2  \cf4 (\cf6 aux_value\cf2  \cf4 >\cf2  \cf7 0\cf4 );
\par 
\par \cf2   \cf4 \}
\par \cf2   \cf8 else
\par \cf2   \cf4 \{
\par \cf2   \cf6 padds\cf4 =\cf6 spaces\cf4 -\cf7 1\cf4 ;\cf2   
\par   \cf4 \}
\par \cf2   
\par   \cf6 Serial\cf4 .\cf6 print\cf4 (\cf9 "This is value :"\cf4 );
\par \cf2   \cf6 Serial\cf4 .\cf6 println\cf4 (\cf6 value\cf4 );
\par \cf2   \cf6 Serial\cf4 .\cf6 print\cf4 (\cf9 "This is spaces :"\cf4 );
\par \cf2   \cf6 Serial\cf4 .\cf6 println\cf4 (\cf6 spaces\cf4 );
\par \cf2   \cf6 Serial\cf4 .\cf6 print\cf4 (\cf9 "This is padds :"\cf4 );
\par \cf2   \cf6 Serial\cf4 .\cf6 println\cf4 (\cf6 padds\cf4 );
\par \cf2   
\par   \cf8 if\cf2  \cf4 (\cf6 padds\cf4 !=\cf7 0\cf4 )
\par \cf2   \cf4 \{
\par \cf2     \cf8 if\cf2  \cf4 (\cf6 padds\cf4 ==\cf7 1\cf4 )
\par \cf2     \cf6 result\cf4 =\cf9 "0"\cf4 ;
\par \cf2   \cf8 else\cf2  \cf8 if\cf2  \cf4 (\cf6 padds\cf4 ==\cf7 2\cf4 )
\par \cf2     \cf6 result\cf4 =\cf9 "00"\cf4 ;
\par \cf2   \cf8 else\cf2  \cf8 if\cf2  \cf4 (\cf6 padds\cf4 ==\cf7 3\cf4 )
\par \cf2     \cf6 result\cf4 =\cf9 "000"\cf4 ;
\par \cf2   \cf8 else\cf2  \cf8 if\cf2  \cf4 (\cf6 padds\cf4 ==\cf7 4\cf4 )
\par \cf2     \cf6 result\cf4 =\cf9 "0000"\cf4 ;
\par \cf2   \cf8 else\cf2  \cf8 if\cf2  \cf4 (\cf6 padds\cf4 ==\cf7 5\cf4 )
\par \cf2     \cf6 result\cf4 =\cf9 "00000"\cf4 ;
\par \cf2   \cf8 else\cf2  \cf8 if\cf2  \cf4 (\cf6 padds\cf4 ==\cf7 6\cf4 )
\par \cf2     \cf6 result\cf4 =\cf9 "00000"\cf4 ;
\par \cf2   \cf4 \}
\par 
\par \cf2   \cf6 result\cf4 .\cf6 concat\cf4 (\cf6 value\cf4 );
\par 
\par \cf2   \cf8 return\cf2  \cf6 result\cf4 ;
\par \}
\par 
\par \cf8 void\cf2  \cf6 set_timer_off\cf4 ()
\par \{
\par \cf2   \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_off_hour\cf2  \cf4 =\cf2  \cf6 hour\cf4 ()+\cf6 function_temp\cf4 .\cf6 extra_value2\cf4 /\cf7 3600\cf4 ;
\par \cf2   \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_off_minute\cf2  \cf4 =\cf2  \cf6 minute\cf4 ()+\cf6 function_temp\cf4 .\cf6 extra_value2\cf4 /\cf7 60\cf4 ;
\par \cf2   \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_off_second\cf2  \cf4 =\cf2  \cf6 second\cf4 ()+\cf6 function_temp\cf4 .\cf6 extra_value2\cf4 %\cf7 60\cf4 ;
\par \cf2   \cf6 adjust_timer_off\cf4 ();\cf2  
\par \cf4 \}
\par 
\par \cf8 void\cf2  \cf6 set_timer_on\cf4 ()
\par \{
\par 
\par \cf2   \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_on_hour\cf2  \cf4 =\cf2  \cf6 hour\cf4 ();\cf1\i //+function_temp.extra_value2;///3600;
\par \i0\cf2   \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_on_minute\cf2  \cf4 =\cf2  \cf6 minute\cf4 ();\cf1\i //+function_temp.extra_value2;///60;
\par \i0\cf2   \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_on_second\cf2  \cf4 =\cf2  \cf6 second\cf4 ()+\cf6 function_temp\cf4 .\cf6 extra_value2\cf2  \cf4 ;\cf1\i //%60;
\par \i0\cf2   \cf6 adjust_timer_on\cf4 ();
\par \cf2               
\par \cf4 \}
\par 
\par \cf8 void\cf2  \cf6 adjust_timer_on\cf4 ()
\par \{\cf2  
\par   \cf8 if\cf4 (\cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_on_second\cf2  \cf4 >=\cf2  \cf7 60\cf4 )
\par \cf2   \cf4 \{\cf2   
\par    \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_on_minute\cf2   \cf4 =\cf2  \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_on_minute\cf2  \cf4 +\cf2  \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_on_second\cf2  \cf4 /\cf2  \cf7 60\cf4 ;
\par \cf2    \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_on_second\cf2  \cf4 =\cf2  \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_on_second\cf2  \cf4 %\cf2  \cf7 60\cf4 ;
\par \cf2   \cf4 \}
\par 
\par \cf2   \cf8 if\cf4 (\cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_on_minute\cf2  \cf4 >=\cf2  \cf7 60\cf4 )
\par \cf2   \cf4 \{\cf2  \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_on_hour\cf2  \cf4 =\cf2  \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_on_hour\cf2  \cf4 +\cf2  \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_on_minute\cf2  \cf4 /\cf2  \cf7 60\cf2  \cf4 ;
\par \cf2     \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_on_minute\cf2  \cf4 =\cf2  \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_on_minute\cf2  \cf4 %\cf2  \cf7 60\cf4 ;
\par \cf2   \cf4 \}
\par 
\par \cf2   \cf8 if\cf4 (\cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_on_hour\cf2  \cf4 >=\cf2  \cf7 24\cf4 )
\par \cf2   \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_on_hour\cf2  \cf4 =\cf2  \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_on_hour\cf2  \cf4 %\cf2  \cf7 24\cf4 ;
\par 
\par \}
\par 
\par 
\par \cf8 void\cf2  \cf6 adjust_timer_off\cf4 ()
\par \{\cf2  
\par     \cf8 if\cf4 (\cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_off_second\cf2  \cf4 >=\cf2  \cf7 60\cf4 )
\par \cf2   \cf4 \{\cf2   
\par    \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_off_minute\cf2   \cf4 =\cf2  \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_off_minute\cf2  \cf4 +\cf2  \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_off_second\cf2  \cf4 /\cf2  \cf7 60\cf4 ;
\par \cf2    \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_off_second\cf2  \cf4 =\cf2  \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_off_second\cf2  \cf4 %\cf2  \cf7 60\cf4 ;
\par \cf2   \cf4 \}
\par 
\par \cf2   \cf8 if\cf4 (\cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_off_minute\cf2  \cf4 >=\cf2  \cf7 60\cf4 )
\par \cf2   \cf4 \{\cf2  \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_off_hour\cf2  \cf4 =\cf2  \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_off_hour\cf2  \cf4 +\cf2  \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_off_minute\cf2  \cf4 /\cf2  \cf7 60\cf2  \cf4 ;
\par \cf2     \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_off_minute\cf2  \cf4 =\cf2  \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_off_minute\cf2  \cf4 %\cf2  \cf7 60\cf4 ;
\par \cf2   \cf8 if\cf4 (\cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_off_hour\cf2  \cf4 >=\cf2  \cf7 24\cf4 )
\par \cf2   \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_off_hour\cf2  \cf4 =\cf2  \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 timer_off_hour\cf2  \cf4 %\cf2  \cf7 24\cf4 ;
\par \cf2   
\par   \cf4 \}
\par \}
\par 
\par \cf8 void\cf2  \cf6 set_daily_end\cf4 ()
\par \{
\par \cf2   \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 hour_daily_end\cf2  \cf4 =\cf2  \cf6 function_temp\cf4 .\cf6 extra_value2\cf4 /\cf7 100\cf4 ;
\par \cf2   \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 minute_daily_end\cf2  \cf4 =\cf2  \cf6 function_temp\cf4 .\cf6 extra_value2\cf4 %\cf7 100\cf4 ;
\par \}
\par 
\par \cf8 void\cf2  \cf6 set_daily_start\cf4 ()
\par \{
\par \cf2   \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 hour_daily_start\cf2  \cf4 =\cf2  \cf6 function_temp\cf4 .\cf6 extra_value2\cf4 /\cf7 100\cf4 ;
\par \cf2   \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value\cf4 ].\cf6 minute_daily_start\cf2  \cf4 =\cf2  \cf6 function_temp\cf4 .\cf6 extra_value2\cf4 %\cf7 100\cf4 ;
\par \}
\par 
\par \cf8 int\cf2  \cf6 match_time\cf4 (\cf8 int\cf2  \cf6 i\cf4 )
\par \{\cf2  \cf8 int\cf2  \cf6 result\cf4 =\cf7 0\cf4 ;\cf2  \cf1\i //No match founded
\par 
\par \i0\cf2   \cf8 int\cf2  \cf6 hour_now\cf2  \cf4 =\cf2  \cf6 hour\cf4 ();
\par \cf2   \cf8 int\cf2  \cf6 minute_now\cf2  \cf4 =\cf2  \cf6 minute\cf4 ();
\par \cf2   \cf8 int\cf2  \cf6 second_now\cf2  \cf4 =\cf2  \cf6 second\cf4 ();
\par \cf2    
\par    \cf8 if\cf2  \cf4 (\cf2  \cf4 (\cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 hour_daily_end\cf4 ==\cf6 hour_now\cf4 )\cf2  \cf4 &&\cf2  \cf4 (\cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 minute_daily_end\cf4 ==\cf6 minute_now\cf4 )\cf2  \cf4 )\cf2  \cf1\i //return 6 (same n. as activity)
\par \i0\cf2     \cf8 if\cf2  \cf4 (\cf2  \cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 second_daily_end_and_start\cf4 ==\cf6 second_now\cf4 )
\par \cf2     \cf4 \{
\par 
\par \cf2       \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 " match with daily_end, I'll return 6"\cf4 );
\par 
\par \cf2       \cf6 result\cf4 =\cf7 6\cf4 ;
\par \cf2       \cf4 \}
\par \cf2  
\par    \cf8 if\cf2  \cf4 (\cf2  \cf4 (\cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 hour_daily_start\cf4 ==\cf6 hour_now\cf4 )\cf2  \cf4 &&\cf2  \cf4 (\cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 minute_daily_start\cf4 ==\cf6 minute_now\cf4 ))\cf2  \cf1\i //return 5 (same n. as activity)
\par \i0\cf2       \cf8 if\cf4 (\cf2  \cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 second_daily_end_and_start\cf4 ==\cf6 second_now\cf2  \cf4 )
\par \cf2       \cf4 \{
\par \cf2       \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 " match with daily_start, I'll return 5"\cf4 );
\par \cf2       \cf6 result\cf4 =\cf7 5\cf4 ;\cf2  \cf1\i //Turn on founded
\par \i0\cf2       \cf4 \}
\par \cf2    
\par    \cf8 if\cf2  \cf4 (\cf2  \cf4 (\cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 timer_off_hour\cf4 ==\cf6 hour_now\cf4 )\cf2  \cf4 &&\cf2  \cf4 (\cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 timer_off_minute\cf4 ==\cf6 minute_now\cf2  \cf4 )\cf2  \cf4 )\cf2  \cf1\i //return 4 (same n. as activity)
\par \i0\cf2         \cf8 if\cf2  \cf4 (\cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 timer_off_second\cf4 ==\cf6 second_now\cf4 )
\par \cf2         \cf4 \{
\par \cf2         \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 " match with timer_off, I'll return 4"\cf4 );
\par \cf2         \cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 timer_off_hour\cf2  \cf4 =\cf2  \cf7 61\cf4 ;
\par \cf2         \cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 timer_off_minute\cf2  \cf4 =\cf2  \cf7 61\cf4 ;
\par \cf2         \cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 timer_off_second\cf2  \cf4 =\cf2  \cf7 61\cf4 ;
\par \cf2         \cf6 result\cf4 =\cf7 4\cf4 ;
\par \cf2         \cf4 \}
\par \cf2     \cf8 if\cf2  \cf4 (\cf2  \cf4 (\cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 timer_on_hour\cf4 ==\cf6 hour_now\cf2  \cf4 )\cf2  \cf4 &&\cf2  \cf4 (\cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 timer_on_minute\cf4 ==\cf6 minute_now\cf4 )\cf2  \cf4 )\cf2  \cf1\i //return 3 (same n. as activity)
\par \i0\cf2         \cf8 if\cf4 (\cf2  \cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 timer_on_second\cf4 ==\cf6 second_now\cf2  \cf4 )
\par \cf2         \cf4 \{
\par \cf2         \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 " match with timer_on, I'll return 3"\cf4 );
\par \cf2            
\par         \cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 timer_on_hour\cf2  \cf4 =\cf2  \cf7 61\cf4 ;
\par \cf2         \cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 timer_on_minute\cf2  \cf4 =\cf2  \cf7 61\cf4 ;
\par \cf2         \cf6 rel\cf4 [\cf6 i\cf4 ].\cf6 timer_on_second\cf2  \cf4 =\cf2  \cf7 61\cf4 ;
\par \cf2         \cf6 result\cf4 =\cf7 3\cf4 ;
\par \cf2        \cf4 \}
\par 
\par \cf2    \cf8 return\cf2  \cf6 result\cf4 ;
\par \}
\par 
\par \cf8 void\cf2  \cf6 turn_by_match\cf4 ()
\par \{\cf2  \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "Checking by match : "\cf4 );
\par \cf2   \cf8 for\cf2  \cf4 (\cf8 int\cf2  \cf6 i\cf4 =\cf7 0\cf4 ;\cf2  \cf6 i\cf4 <\cf6 total_relay\cf4 ;\cf2  \cf6 i\cf4 ++)
\par \cf2    \cf4 \{\cf8 int\cf2  \cf6 match_result\cf2  \cf4 =\cf2  \cf6 match_time\cf4 (\cf6 i\cf4 );
\par \cf2     \cf8 if\cf2  \cf4 (\cf6 match_result\cf2  \cf4 ==\cf2  \cf7 6\cf4 )\cf2  \cf1\i //daily_end
\par \i0\cf2     \cf6 turn_off_pin\cf4 (\cf6 i\cf4 );
\par \cf2      \cf8 else\cf2  \cf8 if\cf2  \cf4 (\cf6 match_result\cf2  \cf4 ==\cf2  \cf7 5\cf4 )\cf2  \cf1\i //daily_start
\par \i0\cf2      \cf6 turn_on_pin\cf4 (\cf6 i\cf4 );
\par \cf2       \cf8 else\cf2  \cf8 if\cf2  \cf4 (\cf6 match_result\cf2  \cf4 ==\cf2  \cf7 3\cf4 )\cf2  \cf1\i //timer_on
\par \i0\cf2       \cf6 turn_on_pin\cf4 (\cf6 i\cf4 );
\par \cf2        \cf8 else\cf2  \cf8 if\cf2  \cf4 (\cf6 match_result\cf2  \cf4 ==\cf2  \cf7 4\cf4 )\cf2  \cf1\i //timer_off
\par \i0\cf2        \cf6 turn_off_pin\cf4 (\cf6 i\cf4 );
\par \cf2         \cf8 else\cf2  \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "No match founded"\cf4 );
\par \cf2    \cf4 \}
\par \}
\par 
\par 
\par \cf8 void\cf2  \cf6 turn_on_pin\cf4 (\cf8 int\cf2  \cf6 index\cf4 )
\par \{
\par \cf2       \cf6 digitalWrite\cf4 (\cf2  \cf6 index\cf2  \cf4 ,\cf2  \cf6 LOW\cf4 );
\par \cf2       \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "ON"\cf4 );
\par \cf2       \cf6 delay\cf2  \cf4 (\cf7 4000\cf4 );\cf2        
\par \cf4 \}
\par 
\par \cf8 void\cf2  \cf6 turn_off_pin\cf4 (\cf8 int\cf2  \cf6 index\cf4 )
\par \{
\par \cf2       \cf6 digitalWrite\cf4 (\cf2  \cf6 index\cf2  \cf4 ,\cf2  \cf6 HIGH\cf4 );
\par \cf2       \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "OFF"\cf4 );
\par \cf2       \cf6 delay\cf2  \cf4 (\cf7 4000\cf4 );\cf2        
\par \cf4 \}
\par 
\par \cf8 void\cf2  \cf6 turn_off\cf4 ()
\par \{
\par \cf2       \cf6 digitalWrite\cf4 (\cf6 function_temp\cf4 .\cf6 extra_value\cf2  \cf4 ,\cf2  \cf6 HIGH\cf4 );
\par \cf2       \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "OFF"\cf4 );
\par \cf2       \cf6 delay\cf2  \cf4 (\cf7 4000\cf4 );\cf2                                      \cf1\i //this is to not overcharge the relay
\par \i0\cf2   \cf4 \}
\par 
\par \cf8 void\cf2  \cf6 timer_turn_off\cf4 ()
\par \{
\par \cf2       \cf6 digitalWrite\cf4 (\cf2  \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value2\cf4 ].\cf6 socket\cf2  \cf4 ,\cf2  \cf6 HIGH\cf4 );
\par \cf2       \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "OFF"\cf4 );
\par \cf2       \cf6 delay\cf2  \cf4 (\cf7 4000\cf4 );\cf2                                      \cf1\i //this is to not overcharge the relay
\par \i0\cf2   \cf4 \}
\par 
\par \cf8 void\cf2  \cf6 timer_turn_on\cf4 ()
\par \{
\par \cf2       \cf6 digitalWrite\cf4 (\cf2  \cf6 rel\cf4 [\cf6 function_temp\cf4 .\cf6 extra_value2\cf4 ].\cf6 socket\cf2  \cf4 ,\cf2  \cf6 LOW\cf4 );
\par \cf2       \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "ON"\cf4 );
\par \cf2       \cf6 delay\cf2  \cf4 (\cf7 4000\cf4 );\cf2                                      \cf1\i //this is to not overcharge the relay
\par \i0\cf2   \cf4 \}
\par 
\par \cf8 void\cf2  \cf6 turn_on\cf4 ()
\par \{
\par \cf2       \cf6 digitalWrite\cf4 (\cf6 function_temp\cf4 .\cf6 extra_value\cf2  \cf4 ,\cf2  \cf6 LOW\cf4 );
\par \cf2       \cf6 Serial\cf4 .\cf6 println\cf4 (\cf9 "ON"\cf4 );
\par \cf2       \cf6 delay\cf2  \cf4 (\cf7 4000\cf4 );\cf2                                       \cf1\i //this is to not overcharge the relay
\par \i0\cf2   \cf4 \}
\par 
\par 
\par \cf8 void\cf2  \cf6 digitalClockDisplay_notRTC\cf4 ()
\par \{
\par \cf2   \cf1\i // digital clock display of the time
\par \i0\cf2   \cf6 Serial\cf4 .\cf6 print\cf4 (\cf6 hour\cf4 ());
\par \cf2   \cf6 printDigits\cf4 (\cf6 minute\cf4 ());
\par \cf2   \cf6 printDigits\cf4 (\cf6 second\cf4 ());
\par \cf2   \cf6 Serial\cf4 .\cf6 println\cf4 ();\cf2  
\par \cf4 \}
\par 
\par \cf8 void\cf2  \cf6 loop\cf2  \cf4 ()
\par \cf2  \cf4 \{\cf2   
\par   \cf8 if\cf4 (\cf6 bluetooth\cf4 .\cf6 available\cf4 ())
\par \cf2     \cf6 bluetooth_handler\cf4 ();\cf2   
\par   
\par   \cf8 if\cf2  \cf4 (\cf6 irrecv\cf4 .\cf6 decode\cf4 (&\cf6 results\cf4 ))
\par \cf2     \cf6 ir_handler\cf4 (&\cf6 results\cf4 );
\par 
\par \cf2   \cf6 digitalClockDisplay_notRTC\cf4 ();
\par \cf2   \cf6 turn_by_match\cf4 ();
\par \cf2   
\par   \cf6 Serial\cf4 .\cf6 print\cf4 (\cf9 "freeMemory()="\cf4 );
\par \cf2   \cf6 Serial\cf4 .\cf6 println\cf4 (\cf6 freeMemory\cf4 ());
\par 
\par \cf2   \cf6 delay\cf4 (\cf7 50\cf4 );
\par \cf2   \cf4 \}
\par }